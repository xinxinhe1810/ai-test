#!/usr/bin/env node

const yargs = require('yargs/yargs');
const {hideBin} = require('yargs/helpers');
const path = require('path');

const fse = require('fs-extra');

const pc = require('picocolors');

const {OpenaiAutoTest} = require('..');

const dotenv = require('dotenv');

dotenv.config({path: path.join(process.cwd(), '.env'), override: true});
dotenv.config({path: path.join(process.cwd(), '.env.local'), override: true});

/**
 * 选项：
  -c, --config   oepnaitest.config.js 位置                                     [字符串]
  -h, --help     显示帮助信息                                             [布尔]
  -v, --version  显示版本号                                               [布尔]
 */
yargs(hideBin(process.argv))
    .alias('h', 'help')
    .alias('v', 'version')
    .option('config', {
        type: 'string',
        alias: 'c',
        description: 'openaitest.config.js 位置',
    })
    .command(
        ['$0'],
        '',
        async () => {
            if (fse.existsSync(path.resolve((process.cwd(), 'openaitest.config.js')))) {
                const configFile = await import(path.resolve((process.cwd(), 'openaitest.config.js')));

                const config = configFile?.default;

                if (!config) {
                    throw new Error('please init openaitest-config.js');
                }
                run(config);
            }
            else {
                run();
            }
        }
    )
    .command('init', 'init openaitest.config.js', () => {
        const filePath = path.resolve((process.cwd(), 'openaitest.config.js'));

        const code = `
module.exports = {
    include: ['**/utils/*.js']
};`;

        fse.writeFileSync(filePath, code);
        // eslint-disable-next-line no-console
        console.log(pc.green('init success openaitest.config.js'));
    })
    .help().argv;


async function run(options) {
    const openai = new OpenaiAutoTest(options);
    try {
        await openai.run();
    }
    catch (error) {
        console.error('auto test run error', error);
    }
}